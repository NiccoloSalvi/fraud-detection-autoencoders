{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "242fdbd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T10:58:48.676041Z",
     "iopub.status.busy": "2025-03-12T10:58:48.675811Z",
     "iopub.status.idle": "2025-03-12T10:58:54.240356Z",
     "shell.execute_reply": "2025-03-12T10:58:54.239507Z"
    },
    "papermill": {
     "duration": 5.57016,
     "end_time": "2025-03-12T10:58:54.241928",
     "exception": false,
     "start_time": "2025-03-12T10:58:48.671768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import SVC\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a8609458",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T10:58:54.249193Z",
     "iopub.status.busy": "2025-03-12T10:58:54.248857Z",
     "iopub.status.idle": "2025-03-12T10:58:57.220009Z",
     "shell.execute_reply": "2025-03-12T10:58:57.219296Z"
    },
    "papermill": {
     "duration": 2.976007,
     "end_time": "2025-03-12T10:58:57.221472",
     "exception": false,
     "start_time": "2025-03-12T10:58:54.245465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# -----------------------------\n",
    "# 1. Load and preprocess dataset\n",
    "# -----------------------------\n",
    "data = pd.read_csv('/kaggle/input/creditcardfraud/creditcard.csv')\n",
    "dataset = data.to_numpy().astype(np.float32)\n",
    "\n",
    "X = dataset[:, :-1]\n",
    "y = dataset[:, -1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7cf29ee6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T10:58:57.228310Z",
     "iopub.status.busy": "2025-03-12T10:58:57.228055Z",
     "iopub.status.idle": "2025-03-12T10:58:57.285035Z",
     "shell.execute_reply": "2025-03-12T10:58:57.284306Z"
    },
    "papermill": {
     "duration": 0.061946,
     "end_time": "2025-03-12T10:58:57.286576",
     "exception": false,
     "start_time": "2025-03-12T10:58:57.224630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Copy X to X_scaled so that we can replace only specific columns\n",
    "X_scaled = X.copy()\n",
    "\n",
    "# Use RobustScaler on columns 0 and 29\n",
    "scaler = RobustScaler(with_centering=True, with_scaling=True, quantile_range=(25.0, 75.0), unit_variance=False)\n",
    "X_scaled[:, [0, 29]] = scaler.fit_transform(X[:, [0, 29]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d227831c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T10:58:57.293471Z",
     "iopub.status.busy": "2025-03-12T10:58:57.293194Z",
     "iopub.status.idle": "2025-03-12T10:58:57.330117Z",
     "shell.execute_reply": "2025-03-12T10:58:57.329386Z"
    },
    "papermill": {
     "duration": 0.041965,
     "end_time": "2025-03-12T10:58:57.331737",
     "exception": false,
     "start_time": "2025-03-12T10:58:57.289772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Split entire dataset into train and test\n",
    "data_train, data_test, label_train, label_test = train_test_split(X_scaled, y, test_size=0.3, random_state=32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "343bc643",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T10:58:57.338776Z",
     "iopub.status.busy": "2025-03-12T10:58:57.338521Z",
     "iopub.status.idle": "2025-03-12T10:58:57.343943Z",
     "shell.execute_reply": "2025-03-12T10:58:57.343295Z"
    },
    "papermill": {
     "duration": 0.010121,
     "end_time": "2025-03-12T10:58:57.345212",
     "exception": false,
     "start_time": "2025-03-12T10:58:57.335091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# -----------------------------\n",
    "# 3. Define the Autoencoder Model\n",
    "# -----------------------------\n",
    "class Autoencoder(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Autoencoder, self).__init__()\n",
    "        # Encoder: 30 -> 23 -> 19 -> 17 -> 8\n",
    "        self.encoder = nn.Sequential(\n",
    "            nn.Linear(30, 23),\n",
    "            nn.LeakyReLU(0.2),\n",
    "            nn.Dropout(0.1),\n",
    "            nn.Linear(23, 19),\n",
    "            nn.LeakyReLU(0.2),\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(19, 17),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(17, 8)\n",
    "        )\n",
    "        # Decoder: 8 -> 17 -> 19 -> 23 -> 30 with Sigmoid at the end\n",
    "        # (Sigmoid is optional if you are using MSELoss and inputs are not strictly [0,1])\n",
    "        self.decoder = nn.Sequential(\n",
    "            nn.Linear(8, 17),\n",
    "            nn.LeakyReLU(0.2),\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(17, 19),\n",
    "            nn.LeakyReLU(0.2),\n",
    "            nn.Dropout(0.1),\n",
    "            nn.Linear(19, 23),\n",
    "            nn.LeakyReLU(0.2),\n",
    "            nn.Linear(23, 30)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        latent = self.encoder(x)\n",
    "        reconstructed = self.decoder(latent)\n",
    "        return reconstructed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "82c1a7b3",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-12T10:58:57.351733Z",
     "iopub.status.busy": "2025-03-12T10:58:57.351519Z",
     "iopub.status.idle": "2025-03-12T10:59:33.271902Z",
     "shell.execute_reply": "2025-03-12T10:59:33.271008Z"
    },
    "papermill": {
     "duration": 35.925066,
     "end_time": "2025-03-12T10:59:33.273215",
     "exception": false,
     "start_time": "2025-03-12T10:58:57.348149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0, Train Loss: 28.2226, Val Loss: 30.1316\n",
      "Epoch 50, Train Loss: 8.3753, Val Loss: 6.8935\n",
      "Epoch 100, Train Loss: 7.8159, Val Loss: 6.6469\n",
      "Epoch 150, Train Loss: 7.4674, Val Loss: 6.2882\n",
      "Epoch 200, Train Loss: 7.2326, Val Loss: 5.8402\n",
      "Epoch 250, Train Loss: 6.8539, Val Loss: 5.5352\n",
      "Epoch 300, Train Loss: 6.7555, Val Loss: 5.2940\n",
      "Epoch 350, Train Loss: 6.6193, Val Loss: 5.0581\n",
      "Epoch 400, Train Loss: 6.4841, Val Loss: 4.6275\n",
      "Epoch 450, Train Loss: 6.4948, Val Loss: 4.5604\n",
      "Epoch 500, Train Loss: 6.3811, Val Loss: 4.4412\n",
      "Epoch 550, Train Loss: 6.2286, Val Loss: 4.3425\n",
      "Epoch 600, Train Loss: 6.1312, Val Loss: 4.2424\n",
      "Epoch 650, Train Loss: 6.2141, Val Loss: 4.2627\n",
      "Epoch 700, Train Loss: 6.1975, Val Loss: 4.4689\n",
      "Epoch 750, Train Loss: 6.1276, Val Loss: 4.2197\n",
      "Epoch 800, Train Loss: 6.0792, Val Loss: 4.3619\n",
      "Early stopping at epoch 825\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# -----------------------------\n",
    "# 1. Extract fraud samples using label_train (1 = fraud)\n",
    "# -----------------------------\n",
    "# data_train and label_train are assumed to be already defined from your previous splitting.\n",
    "data_train_fraud = data_train[label_train == 1]\n",
    "\n",
    "# -----------------------------\n",
    "# 2. Train/Validation Split (80-20) on the fraud samples\n",
    "# -----------------------------\n",
    "data_train_autoencoder, test_data_autoencoder = train_test_split(data_train_fraud, test_size=0.2, random_state=32)\n",
    "\n",
    "# Convert numpy arrays to PyTorch tensors (ensure float type)\n",
    "tensor_fraud_train = torch.from_numpy(data_train_autoencoder).float()\n",
    "tensor_fraud_val   = torch.from_numpy(test_data_autoencoder).float()\n",
    "\n",
    "# For an autoencoder, input equals target\n",
    "train_dataset = TensorDataset(tensor_fraud_train, tensor_fraud_train)\n",
    "val_dataset   = TensorDataset(tensor_fraud_val, tensor_fraud_val)\n",
    "\n",
    "batch_size = 32\n",
    "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
    "val_loader   = DataLoader(val_dataset,   batch_size=batch_size, shuffle=False)\n",
    "\n",
    "# -----------------------------\n",
    "# 4. Initialize Model, Loss, Optimizer, and Scheduler\n",
    "# -----------------------------\n",
    "my_autoencoder = Autoencoder().to(device)\n",
    "criterion = nn.MSELoss()  # Using MSELoss now\n",
    "optimizer = optim.AdamW(my_autoencoder.parameters(), lr=1e-3, weight_decay=1e-5)\n",
    "scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=500, eta_min=1e-6)\n",
    "\n",
    "# -----------------------------\n",
    "# 5. Training Loop with L1 Regularization and Validation Evaluation\n",
    "# -----------------------------\n",
    "num_epochs = 2000\n",
    "history_loss_train = []\n",
    "history_loss_val   = []\n",
    "patience = 75\n",
    "best_val_loss = float('inf')\n",
    "patience_counter = 0\n",
    "best_model_state = None\n",
    "\n",
    "l1_lambda = 5e-3  # L1 regularization strength\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    my_autoencoder.train()\n",
    "    running_loss_train = 0.0\n",
    "    for batch_x, _ in train_loader:\n",
    "        inputs = batch_x.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        outputs = my_autoencoder(inputs)\n",
    "        loss = criterion(outputs, inputs)\n",
    "        \n",
    "        # Compute L1 norm of the model parameters\n",
    "        l1_norm = sum(p.abs().sum() for p in my_autoencoder.parameters())\n",
    "        loss = loss + l1_lambda * l1_norm\n",
    "        \n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        running_loss_train += loss.item() * inputs.size(0)\n",
    "    \n",
    "    epoch_loss_train = running_loss_train / len(train_loader.dataset)\n",
    "    history_loss_train.append(epoch_loss_train)\n",
    "\n",
    "    # --- Validation Phase ---\n",
    "    my_autoencoder.eval()\n",
    "    running_loss_val = 0.0\n",
    "    with torch.no_grad():\n",
    "        for batch_x, _ in val_loader:\n",
    "            inputs = batch_x.to(device)\n",
    "            outputs = my_autoencoder(inputs)\n",
    "            loss = criterion(outputs, inputs)\n",
    "            running_loss_val += loss.item() * inputs.size(0)\n",
    "    epoch_loss_val = running_loss_val / len(val_loader.dataset)\n",
    "    history_loss_val.append(epoch_loss_val)\n",
    "\n",
    "    # Early stopping check\n",
    "    if epoch_loss_val < best_val_loss:\n",
    "        best_val_loss = epoch_loss_val\n",
    "        best_model_state = my_autoencoder.state_dict()\n",
    "        patience_counter = 0\n",
    "    else:\n",
    "        patience_counter += 1\n",
    "    if patience_counter >= patience:\n",
    "        print(f\"Early stopping at epoch {epoch}\")\n",
    "        my_autoencoder.load_state_dict(best_model_state)\n",
    "        break\n",
    "\n",
    "    # Optionally step the scheduler\n",
    "    # scheduler.step()\n",
    "\n",
    "    if epoch % 50 == 0:\n",
    "        print(f\"Epoch {epoch}, Train Loss: {epoch_loss_train:.4f}, Val Loss: {epoch_loss_val:.4f}\")\n",
    "\n",
    "# Save the model\n",
    "torch.save(my_autoencoder.state_dict(), \"autoencoder.pth\")\n",
    "\n",
    "# -----------------------------\n",
    "# 6. Plot Training & Validation Loss\n",
    "# -----------------------------\n",
    "plt.figure()\n",
    "plt.plot(history_loss_train, label='Train Loss')\n",
    "plt.plot(history_loss_val, label='Validation Loss')\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Loss (Log Scale)\")\n",
    "plt.title(\"Training and Validation Loss\")\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9e293deb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T10:59:33.283091Z",
     "iopub.status.busy": "2025-03-12T10:59:33.282726Z",
     "iopub.status.idle": "2025-03-12T10:59:33.310923Z",
     "shell.execute_reply": "2025-03-12T10:59:33.310021Z"
    },
    "papermill": {
     "duration": 0.034593,
     "end_time": "2025-03-12T10:59:33.312366",
     "exception": false,
     "start_time": "2025-03-12T10:59:33.277773",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 0.9679\n",
      "Test Accuracy: 0.9398\n"
     ]
    }
   ],
   "source": [
    "# create the balanced dataset to train the SVM model\n",
    "data_train_non_fraud = data_train[label_train == 0][:len(data_train_fraud)]\n",
    "\n",
    "# Combine the selected data\n",
    "X_balanced_SVM = np.vstack((data_train_non_fraud, data_train_fraud))\n",
    "y_balanced_SVM = np.hstack((np.zeros(len(data_train_fraud)), np.ones(len(data_train_fraud))))  # Create labels: 0 for non-fraud, 1 for fraud\n",
    "\n",
    "# Shuffle the data\n",
    "shuffle_idx = np.random.permutation(len(X_balanced_SVM))\n",
    "X_balanced_SVM = X_balanced_SVM[shuffle_idx]\n",
    "y_balanced_SVM = y_balanced_SVM[shuffle_idx]\n",
    "\n",
    "# Split into training and test sets for SVM\n",
    "data_train_SVM, data_test_SVM, label_train_SVM, label_test_SVM = train_test_split(X_balanced_SVM, y_balanced_SVM, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train SVM model for validation in the oversampling process\n",
    "my_svm = SVC(kernel='linear', C=1.0)\n",
    "my_svm.fit(data_train_SVM, label_train_SVM)\n",
    "\n",
    "# Get predictions and accuracy\n",
    "label_pred_test = my_svm.predict(data_test_SVM)\n",
    "label_pred_train = my_svm.predict(data_train_SVM)\n",
    "accuracy_train = np.mean(label_pred_train == label_train_SVM)\n",
    "accuracy_test = np.mean(label_pred_test == label_test_SVM)\n",
    "\n",
    "print(f\"Train Accuracy: {accuracy_train:.4f}\")\n",
    "print(f\"Test Accuracy: {accuracy_test:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9f405506",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2025-03-12T10:59:33.322816Z",
     "iopub.status.busy": "2025-03-12T10:59:33.322576Z",
     "iopub.status.idle": "2025-03-12T11:00:19.541756Z",
     "shell.execute_reply": "2025-03-12T11:00:19.540755Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 46.226263,
     "end_time": "2025-03-12T11:00:19.543507",
     "exception": false,
     "start_time": "2025-03-12T10:59:33.317244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial counts - Fraud: 331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 1231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 1531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 1831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 2131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 2431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 2731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 3031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 3331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 3631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 3931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 4231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 4531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 4831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 5131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 5431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 5731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 6031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 6331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 6631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 6931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 7231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 7531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 7831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 8131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 8431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 8731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 9031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 9331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 9631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 9931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 10231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 10531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 10831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 11131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 11431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 11731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 12031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 12331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 12631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 12931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 13231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 13531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 13831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 14131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 14431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 14731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 15031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 15331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 15631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 15931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 16231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 16531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 16831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 17131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 17431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 17731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 18031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 18331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 18631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 18931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 19231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 19531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 19831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 20131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 20431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 20731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 21031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 21331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 21631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 21931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 22231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 22531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 22831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 23131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 23431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 23731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 24031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 24331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 24631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 24931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 25231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 25531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 25831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 26131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 26431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 26731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 27031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 27331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 27631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 27931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 28231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 28531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 28831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 29131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 29431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 29731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 30031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 30331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 30631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 30931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 31231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 31531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 31831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 32131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 32431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 32731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 33031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 33331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 33631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 33931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 34231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 34531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 34831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 35131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 35431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 35731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 36031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 36331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 36631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 36931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 37231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 37531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 37831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 38131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 38431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 38731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 39031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 39331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 39631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 39931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 40231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 40531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 40831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 41131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 41431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 41731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 42031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 42331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 42631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 42931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 43231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 43531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 43831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 44131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 44431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 44731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 45031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 45331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 45631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 45931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 46231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 46531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 46831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 47131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 47431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 47731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 48031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 48331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 48631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 48931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 49231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 49531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 49831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 50131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 50431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 50731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 51031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 51331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 51631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 51931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 52231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 52531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 52831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 53131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 53431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 53731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 54031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 54331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 54631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 54931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 55231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 55531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 55831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 56131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 56431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 56731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 57031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 57331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 57631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 57931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 58231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 58531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 58831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 59131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 59431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 59731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 60031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 60331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 60631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 60931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 61231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 61531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 61831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 62131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 62431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 62731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 63031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 63331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 63631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 63931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 64231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 64531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 64831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 65131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 65431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 65731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 66031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 66331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 66631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 66931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 67231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 67531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 67831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 68131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 68431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 68731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 69031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 69331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 69631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 69931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 70231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 70531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 70831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 71131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 71431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 71731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 72031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 72331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 72631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 72931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 73231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 73531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 73831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 74131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 74431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 74731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 75031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 75331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 75631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 75931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 76231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 76531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 76831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 77131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 77431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 77731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 78031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 78331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 78631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 78931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 79231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 79531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 79831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 80131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 80431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 80731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 81031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 81331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 81631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 81931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 82231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 82531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 82831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 83131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 83431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 83731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 84031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 84331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 84631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 84931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 85231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 85531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 85831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 86131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 86431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 86731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 87031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 87331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 87631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 87931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 88231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 88531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 88831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 89131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 89431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 89731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 90031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 90331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 90631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 90931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 91231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 91531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 91831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 92131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 92431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 92731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 93031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 93331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 93631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 93931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 94231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 94531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 94831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 95131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 95431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 95731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 96031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 96331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 96631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 96931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 97231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 97531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 97831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 98131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 98431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 98731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 99031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 99331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 99631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 99931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 100231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 100531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 100831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 101131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 101431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 101731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 102031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 102331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 102631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 102931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 103231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 103531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 103831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 104131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 104431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 104731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 105031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 105331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 105631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 105931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 106231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 106531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 106831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 107131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 107431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 107731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 108031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 108331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 108631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 108931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 109231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 109531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 109831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 110131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 110431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 110731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 111031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 111331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 111631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 111931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 112231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 112531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 112831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 113131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 113431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 113731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 114031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 114331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 114631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 114931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 115231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 115531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 115831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 116131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 116431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 116731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 117031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 117331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 117631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 117931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 118231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 118531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 118831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 119131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 119431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 119731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 120031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 120331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 120631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 120931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 121231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 121531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 121831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 122131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 122431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 122731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 123031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 123331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 123631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 123931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 124231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 124531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 124831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 125131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 125431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 125731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 126031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 126331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 126631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 126931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 127231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 127531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 127831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 128131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 128431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 128731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 129031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 129331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 129631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 129931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 130231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 130531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 130831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 131131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 131431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 131731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 132031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 132331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 132631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 132931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 133231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 133531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 133831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 134131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 134431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 134731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 135031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 135331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 135631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 135931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 136231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 136531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 136831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 137131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 137431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 137731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 138031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 138331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 138631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 138931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 139231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 139531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 139831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 140131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 140431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 140731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 141031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 141331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 141631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 141931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 142231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 142531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 142831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 143131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 143431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 143731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 144031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 144331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 144631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 144931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 145231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 145531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 145831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 146131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 146431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 146731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 147031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 147331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 147631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 147931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 148231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 148531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 148831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 149131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 149431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 149731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 150031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 150331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 150631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 150931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 151231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 151531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 151831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 152131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 152431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 152731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 153031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 153331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 153631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 153931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 154231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 154531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 154831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 155131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 155431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 155731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 156031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 156331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 156631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 156931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 157231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 157531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 157831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 158131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 158431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 158731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 159031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 159331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 159631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 159931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 160231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 160531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 160831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 161131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 161431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 161731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 162031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 162331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 162631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 162931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 163231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 163531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 163831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 164131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 164431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 164731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 165031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 165331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 165631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 165931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 166231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 166531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 166831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 167131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 167431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 167731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 168031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 168331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 168631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 168931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 169231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 169531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 169831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 170131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 170431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 170731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 171031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 171331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 171631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 171931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 172231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 172531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 172831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 173131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 173431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 173731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 174031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 174331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 174631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 174931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 175231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 175531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 175831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 176131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 176431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 176731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 177031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 177331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 177631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 177931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 178231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 178531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 178831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 179131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 179431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 179731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 180031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 180331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 180631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 180931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 181231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 181531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 181831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 182131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 182431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 182731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 183031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 183331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 183631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 183931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 184231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 184531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 184831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 185131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 185431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 185731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 186031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 186331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 186631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 186931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 187231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 187531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 187831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 188131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 188431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 188731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 189031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 189331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 189631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 189931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 190231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 190531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 190831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 191131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 191431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 191731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 192031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 192331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 192631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 192931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 193231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 193531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 193831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 194131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 194431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 194731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 195031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 195331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 195631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 195931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 196231, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 196531, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 196831, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 197131, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 197431, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 197731, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 198031, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 198331, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 198631, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 198931, Non-fraud: 199033\n",
      "Added 300 synthetic fraud samples. Now, Fraud: 199231, Non-fraud: 199033\n",
      "Balanced oversampled dataset achieved.\n",
      "Final dataset shape: (398264, 30)\n"
     ]
    }
   ],
   "source": [
    "# Create an oversampled dataset starting with the original training data\n",
    "oversampled_data = data_train.copy()    # features only\n",
    "oversampled_labels = label_train.copy()   # corresponding labels\n",
    "\n",
    "# For oversampling, we want to add synthetic fraud samples until fraud count equals non-fraud count.\n",
    "non_fraud_count = np.sum(oversampled_labels == 0)\n",
    "fraud_count = np.sum(oversampled_labels == 1)\n",
    "print(f\"Initial counts - Fraud: {fraud_count}, Non-fraud: {non_fraud_count}\")\n",
    "\n",
    "# Number of synthetic samples to generate per iteration and noise std\n",
    "n_samples_per_iter = 300\n",
    "alpha = 0.9  # standard deviation for Gaussian noise\n",
    "\n",
    "# Use only the original fraud samples (from the training set) as the basis for synthetic data generation.\n",
    "original_fraud_data = data_train[label_train == 1]\n",
    "\n",
    "# Ensure the autoencoder is in evaluation mode\n",
    "my_autoencoder.eval()\n",
    "\n",
    "# Continue generating synthetic fraud samples until the oversampled dataset is balanced\n",
    "while fraud_count < non_fraud_count:\n",
    "    # 1) Encode the original fraud data to the latent space\n",
    "    fraud_tensor = torch.tensor(original_fraud_data, dtype=torch.float32).to(device)\n",
    "    latent_reps = my_autoencoder.encoder(fraud_tensor).detach()\n",
    "    n_fraud_samples = latent_reps.shape[0]\n",
    "    \n",
    "    synthetic_latents = []\n",
    "    # 2) Generate new latent vectors by interpolating between two random latent vectors and adding noise\n",
    "    for _ in range(n_samples_per_iter):\n",
    "        i, j = np.random.choice(n_fraud_samples, size=2, replace=True)\n",
    "        z_i = latent_reps[i]\n",
    "        z_j = latent_reps[j]\n",
    "        lam = np.random.rand()\n",
    "        z_interp = lam * z_i + (1 - lam) * z_j\n",
    "        \n",
    "        # Add Gaussian noise to the interpolated latent vector\n",
    "        noise = torch.normal(mean=0.5, std=alpha, size=z_interp.shape).to(device)\n",
    "        z_syn = z_interp + noise\n",
    "        synthetic_latents.append(z_syn.cpu().numpy())\n",
    "    \n",
    "    synthetic_latents = np.array(synthetic_latents)\n",
    "    synthetic_latents_tensor = torch.tensor(synthetic_latents, dtype=torch.float32).to(device)\n",
    "    \n",
    "    # 3) Decode the synthetic latent vectors to the original feature space\n",
    "    synthetic_data = my_autoencoder.decoder(synthetic_latents_tensor).detach().cpu().numpy()\n",
    "    \n",
    "    # 4) Evaluate the synthetic samples using the trained SVM.\n",
    "    #    Keep only those samples that the SVM predicts as fraud (i.e. label 1)\n",
    "    y_pred = my_svm.predict(synthetic_data)\n",
    "    synthetic_fraud = synthetic_data[y_pred == 1]\n",
    "    \n",
    "    if synthetic_fraud.shape[0] == 0:\n",
    "        print(\"No synthetic fraud samples passed SVM check in this iteration. Trying again...\")\n",
    "        continue\n",
    "    \n",
    "    # 5) Append the accepted synthetic fraud samples to the oversampled dataset.\n",
    "    oversampled_data = np.vstack((oversampled_data, synthetic_fraud))\n",
    "    oversampled_labels = np.hstack((oversampled_labels, np.ones(synthetic_fraud.shape[0])))\n",
    "    \n",
    "    # Update counts\n",
    "    fraud_count = np.sum(oversampled_labels == 1)\n",
    "    non_fraud_count = np.sum(oversampled_labels == 0)\n",
    "    print(f\"Added {synthetic_fraud.shape[0]} synthetic fraud samples. Now, Fraud: {fraud_count}, Non-fraud: {non_fraud_count}\")\n",
    "\n",
    "print(\"Balanced oversampled dataset achieved.\")\n",
    "print(f\"Final dataset shape: {oversampled_data.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "35df70a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T11:00:19.580832Z",
     "iopub.status.busy": "2025-03-12T11:00:19.580415Z",
     "iopub.status.idle": "2025-03-12T11:00:30.819075Z",
     "shell.execute_reply": "2025-03-12T11:00:30.818377Z"
    },
    "papermill": {
     "duration": 11.257352,
     "end_time": "2025-03-12T11:00:30.820729",
     "exception": false,
     "start_time": "2025-03-12T11:00:19.563377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from keras.callbacks import EarlyStopping\n",
    "from keras.callbacks import ModelCheckpoint\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score \n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from keras.models import Sequential\n",
    "from keras.layers import LSTM, Dense, Embedding, Dropout,Input, Attention, Layer, Concatenate, Permute, Dot, Multiply, Flatten\n",
    "from keras.layers import RepeatVector, Dense, Activation, Lambda\n",
    "from keras.models import Sequential\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Model\n",
    "\n",
    "class attention(Layer):\n",
    "    def __init__(self,**kwargs):\n",
    "        super(attention,self).__init__(**kwargs)\n",
    "\n",
    "    def build(self,input_shape):\n",
    "        self.W=self.add_weight(name=\"att_weight\",shape=(input_shape[-1],1),initializer=\"normal\")\n",
    "        self.b=self.add_weight(name=\"att_bias\",shape=(input_shape[1],1),initializer=\"zeros\")        \n",
    "        super(attention, self).build(input_shape)\n",
    "\n",
    "    def call(self,x):\n",
    "        et=tf.squeeze(tf.tanh(tf.linalg.matmul(x,self.W)+self.b),axis=-1)\n",
    "        at=tf.nn.softmax(et)\n",
    "        at=tf.expand_dims(at,axis=-1)\n",
    "        output=x*at\n",
    "        return tf.reduce_sum(output,axis=1)\n",
    "\n",
    "    def compute_output_shape(self,input_shape):\n",
    "        return (input_shape[0],input_shape[-1])\n",
    "\n",
    "    def get_config(self):\n",
    "        return super(attention,self).get_config()\n",
    "\n",
    "def create_ALSTM_model():\n",
    "    inputs1=Input((1,30))\n",
    "    att_in=LSTM(50,return_sequences=True,dropout=0.3,recurrent_dropout=0.2)(inputs1)\n",
    "    att_in_1=LSTM(50,return_sequences=True,dropout=0.3,recurrent_dropout=0.2)(att_in)\n",
    "    att_out=attention()(att_in_1)\n",
    "    outputs1=Dense(1,activation='sigmoid',trainable=True)(att_out)\n",
    "    model1=Model(inputs1,outputs1)\n",
    "    \n",
    "    model1.compile(loss='mse', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "    return model1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9e706bdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T11:00:30.851035Z",
     "iopub.status.busy": "2025-03-12T11:00:30.850540Z",
     "iopub.status.idle": "2025-03-12T11:00:30.859644Z",
     "shell.execute_reply": "2025-03-12T11:00:30.859012Z"
    },
    "papermill": {
     "duration": 0.025017,
     "end_time": "2025-03-12T11:00:30.860778",
     "exception": false,
     "start_time": "2025-03-12T11:00:30.835761",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from scipy.optimize import minimize_scalar\n",
    "\n",
    "# --- Adjusted training function using Keras that accepts a validation dataset ---\n",
    "def train_model(model, X, y, num_epochs=2, batch_size=128, val_data=None):\n",
    "    # Ensure X has shape (num_samples, 1, 30)\n",
    "    if X.ndim == 2:\n",
    "        X_train = X.reshape(-1, 1, X.shape[1])\n",
    "    else:\n",
    "        X_train = X\n",
    "\n",
    "    if val_data is not None:\n",
    "        X_val, y_val = val_data\n",
    "        if X_val.ndim == 2:\n",
    "            X_val = X_val.reshape(-1, 1, X_val.shape[1])\n",
    "        val_data = (X_val, y_val)\n",
    "\n",
    "    # Train the model using Keras' fit, including validation monitoring\n",
    "    history = model.fit(X_train, y, epochs=num_epochs, batch_size=batch_size, verbose=1)\n",
    "    return model\n",
    "\n",
    "def GB_classifier(X, y, n_estimators=10, val_data=None):\n",
    "    estimators = []\n",
    "    \n",
    "    # Define squared-error loss (for evaluating the ensemble)\n",
    "    loss_fn = lambda y_true, y_pred: 0.5 * np.sum((y_true - y_pred)**2)\n",
    "    \n",
    "    # Initialize ensemble predictions for training data\n",
    "    # hx = np.full(len(y), np.mean(y), dtype=np.float32)\n",
    "    hx = np.full(len(y), 0, dtype=np.float32)\n",
    "    \n",
    "    # If validation data is provided, initialize ensemble predictions for validation set\n",
    "    if val_data is not None:\n",
    "        X_val, y_val = val_data\n",
    "        hx_val = np.full(len(y_val), np.mean(y_val), dtype=np.float32)\n",
    "    \n",
    "    for t in range(n_estimators):\n",
    "        # Compute training residuals: true labels minus current ensemble predictions\n",
    "        residuals = y - hx\n",
    "        \n",
    "        # For validation, compute residuals using current ensemble prediction if available\n",
    "        if val_data is not None:\n",
    "            residuals_val = y_val - hx_val\n",
    "        \n",
    "        # Create a new instance of the Keras ALSTM model\n",
    "        model_t = create_ALSTM_model()\n",
    "        \n",
    "        # Train the model on (X, residuals) and use validation residuals if provided\n",
    "        if val_data is not None:\n",
    "            train_model(model_t, X, residuals, num_epochs=2, batch_size=128, \n",
    "                        val_data=(X_val, residuals_val))\n",
    "        else:\n",
    "            train_model(model_t, X, residuals, num_epochs=2, batch_size=128)\n",
    "        \n",
    "        # Predict the current weak learner's output h_t on the training set.\n",
    "        X_input = X.reshape(-1, 1, X.shape[1]) if X.ndim == 2 else X\n",
    "        predictions = model_t.predict(X_input)\n",
    "        h_t = predictions.flatten()\n",
    "        \n",
    "        # Use line search to determine the optimal step length alpha\n",
    "        func = lambda alpha: np.sum(loss_fn(y, hx + alpha * h_t))\n",
    "        alpha_t = np.float32(minimize_scalar(func, method=\"golden\").x)\n",
    "        \n",
    "        # Update the ensemble predictions for training data\n",
    "        hx += alpha_t * h_t\n",
    "        \n",
    "        # If validation data is provided, update its ensemble predictions\n",
    "        if val_data is not None:\n",
    "            X_val_input = X_val.reshape(-1, 1, X_val.shape[1]) if X_val.ndim == 2 else X_val\n",
    "            predictions_val = model_t.predict(X_val_input)\n",
    "            h_t_val = predictions_val.flatten()\n",
    "            hx_val += alpha_t * h_t_val\n",
    "        \n",
    "        print(f\"a_{t+1} = {alpha_t:.4f}\")\n",
    "        print(f\"hx_{t+1} = {hx}\")\n",
    "        if val_data is not None:\n",
    "            print(f\"hx_val_{t+1} = {hx_val}\")\n",
    "        \n",
    "        estimators.append((model_t, alpha_t))\n",
    "    \n",
    "    return estimators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4cd448c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T11:00:30.890469Z",
     "iopub.status.busy": "2025-03-12T11:00:30.890211Z",
     "iopub.status.idle": "2025-03-12T11:08:35.615791Z",
     "shell.execute_reply": "2025-03-12T11:08:35.614677Z"
    },
    "papermill": {
     "duration": 484.743047,
     "end_time": "2025-03-12T11:08:35.617582",
     "exception": false,
     "start_time": "2025-03-12T11:00:30.874535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 7ms/step - accuracy: 0.9849 - loss: 0.0219\n",
      "Epoch 2/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 7ms/step - accuracy: 0.9990 - loss: 8.9453e-04\n",
      "\u001b[1m12446/12446\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 2ms/step\n",
      "a_1 = 0.9998\n",
      "hx_1 = [7.8299227e-06 2.1561711e-06 6.1794344e-05 ... 9.9975485e-01 9.9975687e-01\n",
      " 9.9975413e-01]\n",
      "Epoch 1/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 7ms/step - accuracy: 0.0000e+00 - loss: 0.0190\n",
      "Epoch 2/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 7ms/step - accuracy: 0.0000e+00 - loss: 2.8074e-04\n",
      "\u001b[1m12446/12446\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 2ms/step\n",
      "a_2 = 0.3820\n",
      "hx_2 = [5.7154411e-05 6.1714391e-06 1.0590385e-04 ... 9.9975532e-01 9.9976730e-01\n",
      " 9.9976736e-01]\n",
      "Epoch 1/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 7ms/step - accuracy: 0.0000e+00 - loss: 0.0189\n",
      "Epoch 2/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 7ms/step - accuracy: 0.0000e+00 - loss: 2.5601e-04\n",
      "\u001b[1m12446/12446\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 2ms/step\n",
      "a_3 = -0.0970\n",
      "hx_3 = [5.0797367e-05 5.0008657e-06 8.2299164e-05 ... 9.9975485e-01 9.9976516e-01\n",
      " 9.9976480e-01]\n",
      "Epoch 1/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 7ms/step - accuracy: 0.0000e+00 - loss: 0.0185\n",
      "Epoch 2/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 7ms/step - accuracy: 0.0000e+00 - loss: 3.2685e-04\n",
      "\u001b[1m12446/12446\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 2ms/step\n",
      "a_4 = -0.0435\n",
      "hx_4 = [4.4147750e-05 4.0319292e-06 7.4772252e-05 ... 9.9975473e-01 9.9976444e-01\n",
      " 9.9976397e-01]\n",
      "Epoch 1/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 7ms/step - accuracy: 0.0000e+00 - loss: 0.0182\n",
      "Epoch 2/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 7ms/step - accuracy: 0.0000e+00 - loss: 2.9284e-04\n",
      "\u001b[1m12446/12446\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 2ms/step\n",
      "a_5 = 0.1427\n",
      "hx_5 = [6.3683328e-05 6.7775863e-06 9.1536320e-05 ... 9.9975497e-01 9.9976736e-01\n",
      " 9.9976754e-01]\n",
      "Epoch 1/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 7ms/step - accuracy: 0.0000e+00 - loss: 0.0173\n",
      "Epoch 2/2\n",
      "\u001b[1m3112/3112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 7ms/step - accuracy: 0.0000e+00 - loss: 3.0752e-04\n",
      "\u001b[1m12446/12446\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 2ms/step\n",
      "a_6 = -0.0355\n",
      "hx_6 = [6.1836494e-05 6.4516694e-06 8.9532507e-05 ... 9.9975491e-01 9.9976659e-01\n",
      " 9.9976659e-01]\n"
     ]
    }
   ],
   "source": [
    "estimators = GB_classifier(oversampled_data, oversampled_labels, n_estimators=6, val_data=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "10651743",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-12T11:08:36.469578Z",
     "iopub.status.busy": "2025-03-12T11:08:36.469223Z",
     "iopub.status.idle": "2025-03-12T11:09:15.912020Z",
     "shell.execute_reply": "2025-03-12T11:09:15.911025Z"
    },
    "papermill": {
     "duration": 39.889929,
     "end_time": "2025-03-12T11:09:15.913387",
     "exception": false,
     "start_time": "2025-03-12T11:08:36.023458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2671/2671\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step\n",
      "\u001b[1m2671/2671\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step\n",
      "\u001b[1m2671/2671\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step\n",
      "\u001b[1m2671/2671\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step\n",
      "\u001b[1m2671/2671\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step\n",
      "\u001b[1m2671/2671\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step\n",
      "Precision: 0.8311\n",
      "Recall: 0.7640\n",
      "F1 Score: 0.7961\n",
      "Accuracy: 0.9993\n"
     ]
    }
   ],
   "source": [
    "# Assuming data_test and label_test are defined from your earlier train_test_split\n",
    "# Ensure data_test has shape (n_samples, 1, 30) if needed by the model\n",
    "if data_test.ndim == 2:\n",
    "    data_test_input = data_test.reshape(-1, 1, data_test.shape[1])\n",
    "else:\n",
    "    data_test_input = data_test\n",
    "\n",
    "hx = np.full(len(data_test_input), 0, dtype=np.float32)\n",
    "\n",
    "# Go through each model in the trained ensemble\n",
    "for model, alpha in estimators:\n",
    "    prediction = model.predict(data_test_input).flatten()\n",
    "    hx += alpha * prediction\n",
    "\n",
    "# Threshold the accumulated predictions to get binary outputs\n",
    "y_pred_binary = np.where(hx > 0.5, 1, 0)\n",
    "\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "\n",
    "precision = precision_score(label_test, y_pred_binary)\n",
    "recall = recall_score(label_test, y_pred_binary)\n",
    "f1 = f1_score(label_test, y_pred_binary)\n",
    "accuracy = accuracy_score(label_test, y_pred_binary)\n",
    "\n",
    "print(f\"Precision: {precision:.4f}\")\n",
    "print(f\"Recall: {recall:.4f}\")\n",
    "print(f\"F1 Score: {f1:.4f}\")\n",
    "print(f\"Accuracy: {accuracy:.4f}\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 310,
     "sourceId": 23498,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 634.144869,
   "end_time": "2025-03-12T11:09:20.142900",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-12T10:58:45.998031",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
