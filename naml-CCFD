{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":23498,"sourceType":"datasetVersion","datasetId":310}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# -----------------------------\n# 1. Load and preprocess dataset\n# -----------------------------\ndata = pd.read_csv('/kaggle/input/creditcardfraud/creditcard.csv')\ndataset = data.to_numpy().astype(np.float32)  # Ensure data is float32 for PyTorch\n\n# Standardize all features except the label using StandardScaler\ndataset[:, :-1] = StandardScaler().fit_transform(dataset[:, :-1])\n\n# Extract fraud samples (assuming last column is the label, and fraud=1)\nfraud_data = dataset[dataset[:, -1] == 1]\n\n# -----------------------------\n# 2. Train/Validation Split (80-20)\n# -----------------------------\ntrain_data, val_data = train_test_split(fraud_data, test_size=0.2, random_state=42)\n\ntensor_train = torch.from_numpy(train_data[:, :-1])\ntensor_val = torch.from_numpy(val_data[:, :-1])\ntrain_dataset = TensorDataset(tensor_train, tensor_train)  # Input and target are the same\nval_dataset = TensorDataset(tensor_val, tensor_val)\n\nbatch_size = 32\ntrain_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, pin_memory=True)\nval_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, pin_memory=True)\n\n# -----------------------------\n# 3. Define the Autoencoder Model\n# -----------------------------\nclass Autoencoder(nn.Module):\n    def __init__(self):\n        super(Autoencoder, self).__init__()\n        # Encoder: 31 -> 23 -> 19 -> 17 -> 8 with dropout after first two hidden layers\n        self.encoder = nn.Sequential(\n            nn.Linear(30, 23),\n            nn.Tanh(),\n            nn.Dropout(0.1),\n            nn.Linear(23, 19),\n            nn.Tanh(),\n            nn.Dropout(0.2),\n            nn.Linear(19, 17),\n            nn.Tanh(),\n            nn.Linear(17, 8)\n        )\n        # Decoder: 8 -> 17 -> 19 -> 23 -> 31 with dropout after first two layers\n        self.decoder = nn.Sequential(\n            nn.Linear(8, 17),\n            nn.Tanh(),\n            nn.Dropout(0.2),\n            nn.Linear(17, 19),\n            nn.Tanh(),\n            nn.Dropout(0.1),\n            nn.Linear(19, 23),\n            nn.Tanh(),\n            nn.Linear(23, 30)\n        )\n\n    def forward(self, x):\n        latent = self.encoder(x)\n        reconstructed = self.decoder(latent)\n        return reconstructed\n\n# -----------------------------\n# 4. Initialize Model, Loss, Optimizer, and Scheduler\n# -----------------------------\nmodel = Autoencoder().to(device)\ncriterion = nn.MSELoss()\noptimizer = optim.AdamW(model.parameters(), lr=3e-4, weight_decay=1e-6)\n\n# Option 1: Adjusted CosineAnnealingLR\n# scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=500, eta_min=1e-6)\n\n# Option 2: Or, using ReduceLROnPlateau (ensure to call scheduler.step(validation_loss) during validation)\n# scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=20, verbose=True)\n\n# Option 3: Alternatively, using StepLR\n# scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=200, gamma=0.5)\n\nscheduler = optim.lr_scheduler.ReduceLROnPlateau(\n    optimizer, mode='min', factor=0.05, patience=30\n)\n\n# -----------------------------\n# 5. Training Loop with Validation Evaluation\n# -----------------------------\nnum_epochs = 3000\nhistory_loss_train = []\nhistory_loss_val = []\npatience, best_val_loss, patience_counter = 50, float('inf'), 0\nbest_model_state = None\n\nfor epoch in range(num_epochs):\n    # --- Training Phase ---\n    model.train()\n    running_loss_train = 0.0\n    for batch in train_loader:\n        inputs = batch[0].to(device)\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, inputs)\n        loss.backward()\n        optimizer.step()\n        running_loss_train += loss.item() * inputs.size(0)\n    epoch_loss_train = running_loss_train / len(train_loader.dataset)\n    history_loss_train.append(epoch_loss_train)\n\n    # --- Validation Phase ---\n    model.eval()\n    running_loss_val = 0.0\n    with torch.no_grad():\n        for batch in val_loader:\n            inputs = batch[0].to(device)\n            outputs = model(inputs)\n            loss = criterion(outputs, inputs)\n            running_loss_val += loss.item() * inputs.size(0)\n    epoch_loss_val = running_loss_val / len(val_loader.dataset)\n    history_loss_val.append(epoch_loss_val)\n\n    if epoch_loss_val < best_val_loss:\n        best_val_loss = epoch_loss_val\n        best_model_state = model.state_dict()\n        patience_counter = 0\n    else:\n        patience_counter += 1\n    \n    if patience_counter >= patience:\n        print(f\"Early stopping at epoch {epoch}\")\n        model.load_state_dict(best_model_state)\n        break\n    \n    # scheduler.step()\n    scheduler.step(epoch_loss_val)\n\n    if epoch % 25 == 0:\n        print(f\"Epoch {epoch}, Train Loss: {epoch_loss_train:.4f}, Val Loss: {epoch_loss_val:.4f}\")\n\n# -----------------------------\n# 6. Plot Training and Validation Losses Together\n# -----------------------------\nplt.figure()\nplt.plot(history_loss_train, label='Train Loss')\nplt.plot(history_loss_val, label='Validation Loss')\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss (Log Scale)\")\nplt.title(\"Training and Validation Loss\")\nplt.yscale('log')\nplt.legend()\nplt.show()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-21T08:36:31.836743Z","iopub.execute_input":"2025-02-21T08:36:31.837106Z","iopub.status.idle":"2025-02-21T08:38:17.054877Z","shell.execute_reply.started":"2025-02-21T08:36:31.837081Z","shell.execute_reply":"2025-02-21T08:38:17.054085Z"}},"outputs":[{"name":"stdout","text":"Epoch 0, Train Loss: 22.5707, Val Loss: 21.6465\nEpoch 25, Train Loss: 13.8846, Val Loss: 13.2515\nEpoch 50, Train Loss: 11.2534, Val Loss: 11.0070\nEpoch 75, Train Loss: 9.5634, Val Loss: 9.4770\nEpoch 100, Train Loss: 8.0765, Val Loss: 8.1302\nEpoch 125, Train Loss: 7.1986, Val Loss: 7.4236\nEpoch 150, Train Loss: 6.5765, Val Loss: 6.8851\nEpoch 175, Train Loss: 6.1619, Val Loss: 6.5866\nEpoch 200, Train Loss: 5.8568, Val Loss: 6.3200\nEpoch 225, Train Loss: 5.6682, Val Loss: 6.1793\nEpoch 250, Train Loss: 5.5524, Val Loss: 6.1025\nEpoch 275, Train Loss: 5.4455, Val Loss: 6.0460\nEpoch 300, Train Loss: 5.4412, Val Loss: 6.0366\nEpoch 325, Train Loss: 5.3450, Val Loss: 6.0057\nEpoch 350, Train Loss: 5.3367, Val Loss: 6.0060\nEpoch 375, Train Loss: 5.3532, Val Loss: 5.9938\nEpoch 400, Train Loss: 5.3010, Val Loss: 5.9820\nEpoch 425, Train Loss: 5.2812, Val Loss: 5.9646\nEpoch 450, Train Loss: 5.2642, Val Loss: 5.9726\nEpoch 475, Train Loss: 5.2388, Val Loss: 5.9566\nEpoch 500, Train Loss: 5.2543, Val Loss: 5.9465\nEpoch 525, Train Loss: 5.2510, Val Loss: 5.9317\nEpoch 550, Train Loss: 5.2361, Val Loss: 5.9394\nEpoch 575, Train Loss: 5.2447, Val Loss: 5.9210\nEpoch 600, Train Loss: 5.2150, Val Loss: 5.9008\nEpoch 625, Train Loss: 5.2001, Val Loss: 5.8939\nEpoch 650, Train Loss: 5.1861, Val Loss: 5.8642\nEpoch 675, Train Loss: 5.1710, Val Loss: 5.8361\nEpoch 700, Train Loss: 5.1435, Val Loss: 5.7653\nEpoch 725, Train Loss: 5.0677, Val Loss: 5.6877\nEpoch 750, Train Loss: 4.9698, Val Loss: 5.6041\nEpoch 775, Train Loss: 4.8929, Val Loss: 5.5281\nEpoch 800, Train Loss: 4.8516, Val Loss: 5.4576\nEpoch 825, Train Loss: 4.7271, Val Loss: 5.4276\nEpoch 850, Train Loss: 4.7108, Val Loss: 5.3810\nEpoch 875, Train Loss: 4.6722, Val Loss: 5.3399\nEpoch 900, Train Loss: 4.6123, Val Loss: 5.3228\nEpoch 925, Train Loss: 4.6097, Val Loss: 5.2899\nEpoch 950, Train Loss: 4.5443, Val Loss: 5.2649\nEpoch 975, Train Loss: 4.5470, Val Loss: 5.2561\nEpoch 1000, Train Loss: 4.4703, Val Loss: 5.2583\nEpoch 1025, Train Loss: 4.4915, Val Loss: 5.2328\nEpoch 1050, Train Loss: 4.4253, Val Loss: 5.2253\nEpoch 1075, Train Loss: 4.3973, Val Loss: 5.1880\nEpoch 1100, Train Loss: 4.3622, Val Loss: 5.1384\nEpoch 1125, Train Loss: 4.3618, Val Loss: 5.1274\nEpoch 1150, Train Loss: 4.3467, Val Loss: 5.0749\nEpoch 1175, Train Loss: 4.2800, Val Loss: 5.0629\nEpoch 1200, Train Loss: 4.2790, Val Loss: 5.0271\nEpoch 1225, Train Loss: 4.1932, Val Loss: 5.0012\nEpoch 1250, Train Loss: 4.1943, Val Loss: 4.9835\nEpoch 1275, Train Loss: 4.1837, Val Loss: 4.9376\nEpoch 1300, Train Loss: 4.1400, Val Loss: 4.9232\nEpoch 1325, Train Loss: 4.0979, Val Loss: 4.8820\nEpoch 1350, Train Loss: 4.0908, Val Loss: 4.8425\nEpoch 1375, Train Loss: 4.0179, Val Loss: 4.8189\nEpoch 1400, Train Loss: 4.0372, Val Loss: 4.7753\nEpoch 1425, Train Loss: 3.9687, Val Loss: 4.7507\nEpoch 1450, Train Loss: 3.9177, Val Loss: 4.7172\nEpoch 1475, Train Loss: 3.9569, Val Loss: 4.6891\nEpoch 1500, Train Loss: 3.9442, Val Loss: 4.6410\nEpoch 1525, Train Loss: 3.8971, Val Loss: 4.6309\nEpoch 1550, Train Loss: 3.8583, Val Loss: 4.6019\nEpoch 1575, Train Loss: 3.8478, Val Loss: 4.5705\nEpoch 1600, Train Loss: 3.8747, Val Loss: 4.5406\nEpoch 1625, Train Loss: 3.8221, Val Loss: 4.5222\nEpoch 1650, Train Loss: 3.8525, Val Loss: 4.4777\nEpoch 1675, Train Loss: 3.7667, Val Loss: 4.4519\nEpoch 1700, Train Loss: 3.7313, Val Loss: 4.4124\nEpoch 1725, Train Loss: 3.7786, Val Loss: 4.4054\nEpoch 1750, Train Loss: 3.6728, Val Loss: 4.3651\nEpoch 1775, Train Loss: 3.6892, Val Loss: 4.3477\nEpoch 1800, Train Loss: 3.6700, Val Loss: 4.3504\nEpoch 1825, Train Loss: 3.6349, Val Loss: 4.3063\nEpoch 1850, Train Loss: 3.6349, Val Loss: 4.2686\nEpoch 1875, Train Loss: 3.5661, Val Loss: 4.2544\nEpoch 1900, Train Loss: 3.5767, Val Loss: 4.2121\nEpoch 1925, Train Loss: 3.5202, Val Loss: 4.1471\nEpoch 1950, Train Loss: 3.4639, Val Loss: 4.1174\nEpoch 1975, Train Loss: 3.5153, Val Loss: 4.0345\nEpoch 2000, Train Loss: 3.4718, Val Loss: 4.0214\nEpoch 2025, Train Loss: 3.3849, Val Loss: 3.9858\nEpoch 2050, Train Loss: 3.4170, Val Loss: 3.9337\nEpoch 2075, Train Loss: 3.3514, Val Loss: 3.8743\nEpoch 2100, Train Loss: 3.3336, Val Loss: 3.8634\nEpoch 2125, Train Loss: 3.2944, Val Loss: 3.8421\nEpoch 2150, Train Loss: 3.2486, Val Loss: 3.7804\nEpoch 2175, Train Loss: 3.2374, Val Loss: 3.7267\nEpoch 2200, Train Loss: 3.2408, Val Loss: 3.6999\nEpoch 2225, Train Loss: 3.2152, Val Loss: 3.6279\nEpoch 2250, Train Loss: 3.1255, Val Loss: 3.5880\nEpoch 2275, Train Loss: 3.1228, Val Loss: 3.5642\nEpoch 2300, Train Loss: 3.1054, Val Loss: 3.5332\nEpoch 2325, Train Loss: 3.1280, Val Loss: 3.4873\nEpoch 2350, Train Loss: 3.1660, Val Loss: 3.4792\nEpoch 2375, Train Loss: 3.0051, Val Loss: 3.4459\nEpoch 2400, Train Loss: 3.0764, Val Loss: 3.4197\nEpoch 2425, Train Loss: 3.0359, Val Loss: 3.3992\nEpoch 2450, Train Loss: 3.0722, Val Loss: 3.3874\nEpoch 2475, Train Loss: 2.9379, Val Loss: 3.3739\nEpoch 2500, Train Loss: 2.9829, Val Loss: 3.3431\nEpoch 2525, Train Loss: 2.9269, Val Loss: 3.3018\nEpoch 2550, Train Loss: 2.9310, Val Loss: 3.2507\nEpoch 2575, Train Loss: 2.8771, Val Loss: 3.3019\nEpoch 2600, Train Loss: 2.9709, Val Loss: 3.2114\nEpoch 2625, Train Loss: 2.8950, Val Loss: 3.2164\nEpoch 2650, Train Loss: 2.8301, Val Loss: 3.1623\nEpoch 2675, Train Loss: 2.9013, Val Loss: 3.1346\nEpoch 2700, Train Loss: 2.8513, Val Loss: 3.1177\nEpoch 2725, Train Loss: 2.7865, Val Loss: 3.1125\nEpoch 2750, Train Loss: 2.8867, Val Loss: 3.0831\nEpoch 2775, Train Loss: 2.7823, Val Loss: 3.0491\nEpoch 2800, Train Loss: 2.7756, Val Loss: 3.0394\nEpoch 2825, Train Loss: 2.7458, Val Loss: 3.0090\nEpoch 2850, Train Loss: 2.7989, Val Loss: 2.9958\nEpoch 2875, Train Loss: 2.6946, Val Loss: 2.9819\nEarly stopping at epoch 2881\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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Gfz1118kJCTQt29fW5sff/yR/v37U61aNSZMmMDs2bOZN28eN910k1Nvk3/rrbcYOnQobdu25ccff2TOnDnMmzePevXqFdjt+c7+XuRGmTJl2LRpE3/++adtvFTXrl3txpa1bduW/fv3880331C/fn2+/vprrrvuOr7++usCq1MENCBbxKEWL17M+fPnmTp1Km3btrUtP3jwoAuruqRMmTL4+PjkOGnilSZSvGjr1q3s2bOH7777jgceeMC2/FruJqpUqRILFiwgMTHRrvdo9+7dedpP3759mT17NrNmzWLSpEkEBQXRo0cP2/opU6ZQtWpVpk6dancpbMSIEfmqGWDv3r1UrVrVtvzs2bPZemOmTJnCjTfeyIQJE+yWx8bGEhYWZnuflxnPK1WqxPz580lISLDrPbp42fZifQWhUqVKbNmyBYvFYtd7lFMtXl5e9OjRgx49emCxWHjiiSf44osveO2112w9l6VKleLBBx/kwQcfJDExkbZt2zJy5EgefvjhAvtMIuo5EnGgi/9Cz/ov8vT0dD777DNXlWTH3d2dDh06MG3aNE6cOGFbvm/fvmzjVC63Pdh/PsMw7G7Hzqtu3bqRmZnJ+PHjbcvMZjNjx47N03569uyJn58fn332GbNmzeL222/Hx8fnirWvXr2aVatW5bnmDh064OnpydixY+3299FHH2Vr6+7unq2HZvLkyRw/ftxumb+/P0CupjDo1q0bZrOZTz/91G75//73P0wmU67HjzlCt27dOHXqFL/++qttWWZmJmPHjiUgIMB2yfX8+fN227m5udkm5kxLS8uxTUBAANWrV7etFyko6jkScaBWrVoRGhpKv379bI+2+OGHHwr08sXVjBw5krlz59K6dWsef/xx2y/Z+vXrX/XRFbVr16ZatWo899xzHD9+nKCgIH7//fdrGrvSo0cPWrduzUsvvcShQ4eoW7cuU6dOzfN4nICAAHr27Gkbd5T1khrALbfcwtSpU+nVqxfdu3fn4MGDfP7559StW5fExMQ8HevifE1jxozhlltuoVu3bmzcuJFZs2bZ9QZdPO7o0aN58MEHadWqFVu3buWnn36y63ECqFatGiEhIXz++ecEBgbi7+9Py5YtqVKlSrbj9+jRgxtvvJFhw4Zx6NAhGjVqxNy5c5k+fTpDhgyxG3ztCAsWLCA1NTXb8p49e/LII4/wxRdf0L9/f9avX0/lypWZMmUKK1as4KOPPrL1bD388MPExMRw0003Ub58eQ4fPszYsWNp3LixbXxS3bp1ad++PU2bNqVUqVKsW7eOKVOmMHjwYId+HpGrcs1NciJFx+Vu5a9Xr16O7VesWGFcf/31hq+vrxEVFWW88MILxpw5cwzAWLRoka3d5W7lz+m2af5za/nlbuUfNGhQtm0rVapkd2u5YRjGggULjCZNmhheXl5GtWrVjK+//tp49tlnDR8fn8uchUt27NhhdOjQwQgICDDCwsKMgQMH2m4Nz3ober9+/Qx/f/9s2+dU+/nz543777/fCAoKMoKDg43777/f2LhxY65v5b9oxowZBmBERkZmu33eYrEYb731llGpUiXD29vbaNKkifH3339n+/9gGFe/ld8wDMNsNhujRo0yIiMjDV9fX6N9+/bGtm3bsp3v1NRU49lnn7W1a926tbFq1SqjXbt2Rrt27eyOO336dKNu3bq2aRUufvacakxISDCeeeYZIyoqyvD09DRq1KhhvPfee3ZTC1z8LLn9XvzXxe/k5X5++OEHwzAM4/Tp08aDDz5ohIWFGV5eXkaDBg2y/X+bMmWK0alTJ6NMmTKGl5eXUbFiRePRRx81Tp48aWvzxhtvGC1atDBCQkIMX19fo3bt2sabb75ppKenX7FOEUczGUYh+ietiLhMz549dRu1iAgacyRSIv33UR979+5l5syZtG/f3jUFiYgUIuo5EimBIiMj6d+/P1WrVuXw4cOMHz+etLQ0Nm7cmG3uHhGRkkYDskVKoC5duvDzzz9z6tQpvL29iY6O5q233lIwEhFBPUciIiIidjTmSERERCQLhSMRERGRLEr0mCOLxcKJEycIDAzM09T9IiIi4jqGYZCQkEBUVFS2hx47QokORydOnKBChQquLkNERETy4ejRo5QvX97h+y3R4ejitPZHjx4lKCjIxdWIiIhIbsTHx1OhQgW7By87UokORxcvpQUFBSkciYiIFDHOGhKjAdkiIiIiWSgciYiIiGShcCQiIiKSRYkecyQiItfObDaTkZHh6jKkmPHy8nLKbfq5oXAkIiL5YhgGp06dIjY21tWlSDHk5uZGlSpV8PLyKvBjKxyJiEi+XAxGZcqUwc/PT5PpisNcnKT55MmTVKxYscC/WwpHIiKSZ2az2RaMSpcu7epypBgKDw/nxIkTZGZm4unpWaDH1oBsERHJs4tjjPz8/FxciRRXFy+nmc3mAj+2wpGIiOSbLqWJs7jyu6VwJCIiIpKFwpGIiMg1qFy5Mh999JGryxAHUjgSEZESwWQyXfFn5MiR+drv2rVreeSRR66ptvbt2zNkyJBr2oc4ju5WcwLDMDiflE5scgbVywS4uhwREQFOnjxpe/3rr78yfPhwdu/ebVsWEHDp72vDMDCbzXh4XP3XZHh4uGMLFZdTz5ETrD10gWZvzOehiWtdXYqIiPyrbNmytp/g4GBMJpPt/a5duwgMDGTWrFk0bdoUb29vli9fzv79+7ntttuIiIggICCA5s2bM3/+fLv9/veymslk4uuvv6ZXr174+flRo0YN/vzzz2uq/ffff6devXp4e3tTuXJlPvjgA7v1n332GTVq1MDHx4eIiAjuuOMO27opU6bQoEEDfH19KV26NB06dCApKema6inu1HPkBBVK+QJwIjaFTLMFD3dlUBEp3gzDICWj4G+5BvD1dHfYnU0vvfQS77//PlWrViU0NJSjR4/SrVs33nzzTby9vfn+++/p0aMHu3fvpmLFipfdz6hRo3j33Xd57733GDt2LH379uXw4cOUKlUqzzWtX7+eu+66i5EjR9KnTx9WrlzJE088QenSpenfvz/r1q3jqaee4ocffqBVq1bExMSwbNkywNpbds899/Duu+/Sq1cvEhISWLZsGYZh5PsclQQKR04QEeiDl7sb6WYLJ+NSqVBK84CISPGWkmGm7vA5Ljn2jtGd8fNyzK+z0aNH07FjR9v7UqVK0ahRI9v7119/nT/++IM///yTwYMHX3Y//fv355577gHgrbfe4pNPPmHNmjV06dIlzzV9+OGH3Hzzzbz22msA1KxZkx07dvDee+/Rv39/jhw5gr+/P7fccguBgYFUqlSJJk2aANZwlJmZye23306lSpUAaNCgQZ5rKGnUpeEEbm4myodae4+OXkh2cTUiIpJbzZo1s3ufmJjIc889R506dQgJCSEgIICdO3dy5MiRK+6nYcOGttf+/v4EBQVx5syZfNW0c+dOWrdubbesdevW7N27F7PZTMeOHalUqRJVq1bl/vvv56effiI52fq7p1GjRtx88800aNCAO++8k6+++ooLFy7kq46SRD1HTlIu1JcD55I4diHF1aWIiDidr6c7O0Z3dtmxHcXf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tvUzZsww3NzcjFOnThmGYRhRUVHGsGHDLlsDYLz66qu294mJiQZgzJo1y2GfU0QKN405EpFC5cYbb2T8+PF2y0qVKmV7HR0dbbcuOjqaTZs2AbBz504aNWqEv7+/bX3r1q2xWCzs3r0bk8nEiRMnuPnmm69YQ8OGDW2v/f39CQoK4syZM/n9SCJSxCgciUih4u/vn+0yl6P4+vrmqp2np6fde5PJhMVicUZJIlIIacyRiBQp//zzT7b3derUAaBOnTps3ryZpKQk2/oVK1bg5uZGrVq1CAwMpHLlyixYsKBAaxaRokU9RyJSqKSlpXHq1Cm7ZR4eHoSFhQEwefJkmjVrxg033MBPP/3EmjVrmDBhAgB9+/ZlxIgR9OvXj5EjR3L27FmefPJJ7r//fiIiIgAYOXIkjz32GGXKlKFr164kJCSwYsUKnnzyyYL9oCJSaCkciUihMnv2bCIjI+2W1apVi127dgHWO8l++eUXnnjiCSIjI/n555+pW7cuAH5+fsyZM4enn36a5s2b4+fnR+/evfnwww9t++rXrx+pqan873//47nnniMsLIw77rij4D6giBR6JsMwDFcXISKSGyaTiT/++IOePXu6uhQRKcY05khEREQkC4UjERERkSw05khEigyNAhCRgqCeIxEREZEsFI5EREREslA4EhEREclC4UhEREQkC4UjERERkSwUjkRERESyUDgSERERyULhSERERCQLhSMRERGRLP4PX6gCN9laphoAAAAASUVORK5CYII=\n"},"metadata":{}}],"execution_count":24}]}