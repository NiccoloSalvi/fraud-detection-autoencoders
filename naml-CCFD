{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2fbc6631",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-12T08:19:58.423733Z",
     "iopub.status.busy": "2025-03-12T08:19:58.423321Z",
     "iopub.status.idle": "2025-03-12T08:20:52.463615Z",
     "shell.execute_reply": "2025-03-12T08:20:52.462830Z"
    },
    "papermill": {
     "duration": 54.044927,
     "end_time": "2025-03-12T08:20:52.465143",
     "exception": false,
     "start_time": "2025-03-12T08:19:58.420216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(356, 31)\n",
      "Epoch 0, Train Loss: 25.2901, Val Loss: 28.6506\n",
      "Epoch 50, Train Loss: 11.0735, Val Loss: 12.7090\n",
      "Epoch 100, Train Loss: 8.3986, Val Loss: 9.3826\n",
      "Epoch 150, Train Loss: 7.2683, Val Loss: 7.8199\n",
      "Epoch 200, Train Loss: 6.7572, Val Loss: 7.0681\n",
      "Epoch 250, Train Loss: 6.5105, Val Loss: 6.7447\n",
      "Epoch 300, Train Loss: 6.3880, Val Loss: 6.5405\n",
      "Epoch 350, Train Loss: 6.2112, Val Loss: 6.4106\n",
      "Epoch 400, Train Loss: 6.1304, Val Loss: 6.3016\n",
      "Epoch 450, Train Loss: 6.1092, Val Loss: 6.1780\n",
      "Epoch 500, Train Loss: 5.9849, Val Loss: 6.0575\n",
      "Epoch 550, Train Loss: 6.0226, Val Loss: 5.9892\n",
      "Epoch 600, Train Loss: 6.0300, Val Loss: 5.8962\n",
      "Epoch 650, Train Loss: 5.8784, Val Loss: 5.8368\n",
      "Epoch 700, Train Loss: 5.9256, Val Loss: 5.7746\n",
      "Epoch 750, Train Loss: 5.7754, Val Loss: 5.7527\n",
      "Epoch 800, Train Loss: 5.8013, Val Loss: 5.7190\n",
      "Epoch 850, Train Loss: 5.9194, Val Loss: 5.6877\n",
      "Epoch 900, Train Loss: 5.7602, Val Loss: 5.6666\n",
      "Epoch 950, Train Loss: 5.7666, Val Loss: 5.6591\n",
      "Epoch 1000, Train Loss: 5.7313, Val Loss: 5.5344\n",
      "Epoch 1050, Train Loss: 5.7565, Val Loss: 5.6108\n",
      "Early stopping at epoch 1097\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# -----------------------------\n",
    "# 1. Load and preprocess dataset\n",
    "# -----------------------------\n",
    "data = pd.read_csv('/kaggle/input/creditcardfraud/creditcard.csv')\n",
    "dataset = data.to_numpy().astype(np.float32)  # Ensure data is float32 for PyTorch\n",
    "\n",
    "# Standardize selected columns using StandardScaler (example: columns 0 and 29)\n",
    "# scaler = StandardScaler()\n",
    "scaler = RobustScaler(with_centering=True, with_scaling=True, quantile_range=(25.0, 75.0), unit_variance=False)\n",
    "dataset[:, [0, 29]] = scaler.fit_transform(dataset[:, [0, 29]])\n",
    "\n",
    "# Split entire dataset into train and test\n",
    "data_train, data_test = train_test_split(dataset, test_size=0.3, random_state=42)\n",
    "\n",
    "# Extract fraud samples from the train set (last column is the label, 1 = fraud)\n",
    "fraud_data = data_train[data_train[:, -1] == 1]\n",
    "print(fraud_data.shape)\n",
    "\n",
    "# -----------------------------\n",
    "# 2. Train/Validation Split (80-20)\n",
    "# -----------------------------\n",
    "train_data, val_data = train_test_split(fraud_data, test_size=0.2, random_state=32)\n",
    "\n",
    "# Remove the last column (label) so the autoencoder only sees 30 features\n",
    "train_data_X = train_data[:, :-1]  # shape: (num_fraud_train, 30)\n",
    "val_data_X   = val_data[:, :-1]    # shape: (num_fraud_val,   30)\n",
    "\n",
    "tensor_train = torch.from_numpy(train_data_X)\n",
    "tensor_val   = torch.from_numpy(val_data_X)\n",
    "\n",
    "# For autoencoder, input == target (reconstruction)\n",
    "train_dataset = TensorDataset(tensor_train, tensor_train)\n",
    "val_dataset   = TensorDataset(tensor_val,   tensor_val)\n",
    "\n",
    "batch_size = 32\n",
    "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, pin_memory=True)\n",
    "val_loader   = DataLoader(val_dataset,   batch_size=batch_size, shuffle=False, pin_memory=True)\n",
    "\n",
    "# -----------------------------\n",
    "# 3. Define the Autoencoder Model\n",
    "# -----------------------------\n",
    "class Autoencoder(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Autoencoder, self).__init__()\n",
    "        # Encoder: 30 -> 23 -> 19 -> 17 -> 8\n",
    "        self.encoder = nn.Sequential(\n",
    "            nn.Linear(30, 23),\n",
    "            nn.LeakyReLU(0.2),\n",
    "            nn.Dropout(0.1),\n",
    "            nn.Linear(23, 19),\n",
    "            nn.LeakyReLU(0.2),\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(19, 17),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(17, 8)\n",
    "        )\n",
    "        # Decoder: 8 -> 17 -> 19 -> 23 -> 30\n",
    "        self.decoder = nn.Sequential(\n",
    "            nn.Linear(8, 17),\n",
    "            nn.LeakyReLU(0.2),\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(17, 19),\n",
    "            nn.LeakyReLU(0.2),\n",
    "            nn.Dropout(0.1),\n",
    "            nn.Linear(19, 23),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(23, 30)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        latent        = self.encoder(x)\n",
    "        reconstructed = self.decoder(latent)\n",
    "        return reconstructed\n",
    "\n",
    "# -----------------------------\n",
    "# 4. Initialize Model, Loss, Optimizer, and Scheduler\n",
    "# -----------------------------\n",
    "model = Autoencoder().to(device)\n",
    "criterion = nn.MSELoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=5e-4)  # weight_decay is L2 regularization\n",
    "# scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=30)\n",
    "scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=500, eta_min=1e-6)\n",
    "\n",
    "# -----------------------------\n",
    "# 5. Training Loop with L1 Regularization and Validation Evaluation\n",
    "# -----------------------------\n",
    "num_epochs = 2000\n",
    "history_loss_train = []\n",
    "history_loss_val   = []\n",
    "patience          = 75\n",
    "best_val_loss     = float('inf')\n",
    "patience_counter  = 0\n",
    "best_model_state  = None\n",
    "\n",
    "l1_lambda = 5e-3  # Adjust this value to control the strength of L1 regularization\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    # --- Training Phase ---\n",
    "    model.train()\n",
    "    running_loss_train = 0.0\n",
    "    for batch_x, _ in train_loader:\n",
    "        inputs = batch_x.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(inputs)\n",
    "        loss = criterion(outputs, inputs)\n",
    "        \n",
    "        # Compute L1 norm of the model parameters\n",
    "        l1_norm = sum(p.abs().sum() for p in model.parameters())\n",
    "        loss = loss + l1_lambda * l1_norm\n",
    "        \n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        running_loss_train += loss.item() * inputs.size(0)\n",
    "    epoch_loss_train = running_loss_train / len(train_loader.dataset)\n",
    "    history_loss_train.append(epoch_loss_train)\n",
    "\n",
    "    # --- Validation Phase ---\n",
    "    model.eval()\n",
    "    running_loss_val = 0.0\n",
    "    with torch.no_grad():\n",
    "        for batch_x, _ in val_loader:\n",
    "            inputs = batch_x.to(device)\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, inputs)\n",
    "            running_loss_val += loss.item() * inputs.size(0)\n",
    "    epoch_loss_val = running_loss_val / len(val_loader.dataset)\n",
    "    history_loss_val.append(epoch_loss_val)\n",
    "\n",
    "    # Early stopping check\n",
    "    if epoch_loss_val < best_val_loss:\n",
    "        best_val_loss     = epoch_loss_val\n",
    "        best_model_state  = model.state_dict()\n",
    "        patience_counter  = 0\n",
    "    else:\n",
    "        patience_counter += 1\n",
    "    if patience_counter >= patience:\n",
    "        print(f\"Early stopping at epoch {epoch}\")\n",
    "        model.load_state_dict(best_model_state)\n",
    "        break\n",
    "\n",
    "    # scheduler step\n",
    "    # scheduler.step(epoch_loss_val)\n",
    "\n",
    "    if epoch % 50 == 0:\n",
    "        print(f\"Epoch {epoch}, Train Loss: {epoch_loss_train:.4f}, Val Loss: {epoch_loss_val:.4f}\")\n",
    "\n",
    "# Save the model\n",
    "torch.save(model.state_dict(), \"autoencoder.pth\")\n",
    "\n",
    "# -----------------------------\n",
    "# 6. Plot Training & Validation Loss\n",
    "# -----------------------------\n",
    "plt.figure()\n",
    "plt.plot(history_loss_train, label='Train Loss')\n",
    "plt.plot(history_loss_val,   label='Validation Loss')\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Loss (Log Scale)\")\n",
    "plt.title(\"Training and Validation Loss\")\n",
    "plt.yscale('log')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82aa12a0",
   "metadata": {
    "papermill": {
     "duration": 0.002849,
     "end_time": "2025-03-12T08:20:52.471406",
     "exception": false,
     "start_time": "2025-03-12T08:20:52.468557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 310,
     "sourceId": 23498,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 58.180458,
   "end_time": "2025-03-12T08:20:53.996370",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-12T08:19:55.815912",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
